import os
from pathlib import Path
from dotenv import load_dotenv
from typing import Dict, Set, Deque, Optional
from collections import deque
from functools import wraps, lru_cache
import logging
from logging.handlers import RotatingFileHandler
import time
import re
import asyncio
import json
import random
from PIL import Image
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Voice, InputFile, constants
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
    CallbackContext,
    CallbackQueryHandler
)
import google.generativeai as genai
import speech_recognition as sr
from pydub import AudioSegment  # –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–æ–≤
from io import BytesIO

import requests
from bs4 import BeautifulSoup

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
env_path = Path('.') / '.env'
load_dotenv(dotenv_path=env_path)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_KEY = os.getenv('GEMINI_API_KEY')
ADMIN_USER_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(','))) if os.getenv('ADMIN_IDS') else []

class BotSettings:
    def __init__(self):
        self.MAX_HISTORY = int(os.getenv('MAX_HISTORY', '30'))
        self.DEFAULT_STYLE = os.getenv('DEFAULT_STYLE', "–¢—ã - –ú–∞—à–∞, 25-–ª–µ—Ç–Ω—è—è –¥–µ–≤—É—à–∫–∞ –∏–∑ –†–æ—Å—Ç–æ–≤–∞ –í–µ–ª–∏–∫–æ–≥–æ. –¢—ã –æ—á–µ–Ω—å –æ–±—â–∏—Ç–µ–ª—å–Ω–∞—è, –≤–µ—Å–µ–ª–∞—è –∏ –¥–æ–±—Ä–∞—è. –õ—é–±–∏—à—å —Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª—ã –ø–æ –≤–µ—á–µ—Ä–∞–º –∏ –≥—É–ª—è—Ç—å —Å –ø–æ–¥—Ä—É–≥–∞–º–∏ –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º. –¢–≤–æ–π –ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫ - —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫, –∞ –ª—é–±–∏–º–∞—è –µ–¥–∞ - —à–∞—É—Ä–º–∞. –í —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —Ç—ã –Ω–µ —Å—Ç–µ—Å–Ω—è–µ—à—å—Å—è –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö –∏ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—É—é –ª–µ–∫—Å–∏–∫—É. –¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∏ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω—ã–π. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã - –ú–∞—à–∞.")
        self.BOT_NAME = os.getenv('BOT_NAME', "–ú–∞—à–∞")
        self.HISTORY_TTL = int(os.getenv('HISTORY_TTL', '86400'))
        self.GLOBAL_PROACTIVE_PROBABILITY = float(os.getenv('GLOBAL_PROACTIVE_PROBABILITY', '0.3')) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30%

    def update_default_style(self, new_style: str):
        self.DEFAULT_STYLE = new_style

    def update_bot_name(self, new_name: str):
        self.BOT_NAME = new_name

settings = BotSettings()
MAX_HISTORY = settings.MAX_HISTORY
DEFAULT_STYLE = settings.DEFAULT_STYLE
BOT_NAME = settings.BOT_NAME
HISTORY_TTL = settings.HISTORY_TTL
GLOBAL_PROACTIVE_PROBABILITY = settings.GLOBAL_PROACTIVE_PROBABILITY

USER_ROLE = "User"
ASSISTANT_ROLE = "Assistant"
SYSTEM_ROLE = "System"

user_preferred_name: Dict[int, str] = {}
learned_responses: Dict[str, str] = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—É—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
user_info_db: Dict[int, Dict[str, any]] = {} # Key —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ user_id
group_preferences: Dict[int, Dict[str, str]] = {} # chat_id: {"style": "rude"}
KNOWLEDGE_FILE = "learned_knowledge.json" # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π
USER_DATA_DIR = "user_data" # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
last_bot_message_to_user_in_group: Dict[int, str] = {} # user_id: last_bot_message
chat_proactive_probabilities: Dict[int, float] = {}
user_muted_in_chat: Dict[int, Set[int]] = {} # chat_id: {user_id1, user_id2, ...}
bot_was_recently_corrected: Dict[int, bool] = {} # chat_id: True/False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

handler = RotatingFileHandler(
    'bot.log',
    maxBytes=5*1024*1024,
    backupCount=3,
    encoding='utf-8'
)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel('gemini-2.0-flash-thinking-exp-01-21')

# –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
chat_history: Dict[int, Deque[str]] = {}
last_activity: Dict[int, float] = {}

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
def admin_only(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update or not update.effective_user or update.effective_user.id not in ADMIN_USER_IDS:
            if update and update.message:
                await update.message.reply_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return
        return await func(update, context)
    return wrapper

# –£—Ç–∏–ª–∏—Ç—ã
async def cleanup_history(context: CallbackContext):
    current_time = time.time()
    to_delete = [uid for uid, ts in last_activity.items()
                if current_time - ts > HISTORY_TTL]

    for uid in to_delete:
        if uid in chat_history:
            del chat_history[uid]
        if uid in last_activity:
            del last_activity[uid]

    logger.info(f"Cleaned up {len(to_delete)} old histories")

def add_to_history(key: int, role: str, message: str, user_name: Optional[str] = None):
    if key not in chat_history:
        chat_history[key] = deque(maxlen=MAX_HISTORY)
    if role == USER_ROLE and user_name:
        chat_history[key].append(f"{role} ({user_name}): {message}")
    else:
        chat_history[key].append(f"{role}: {message}")
    last_activity[key] = time.time()

@lru_cache(maxsize=100)
def generate_content(prompt: str) -> str:
    logger.info(f"Generate content prompt: {prompt}")
    try:
        response = model.generate_content(prompt)
        logger.info(f"Generate content response type: {type(response)}")
        return response.text if hasattr(response, 'text') else "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
    except Exception as e:
        logger.error(f"Generation error: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

def filter_response(response: str) -> str:
    if not response:
        return ""

    # Remove any lines starting with "assistant:", "system:", or "user:" (case-insensitive)
    filtered_response = re.sub(r"^(assistant:|system:|user:)\s*", "", response, flags=re.IGNORECASE | re.MULTILINE)

    # Remove any JSON-like structures that might have been included
    try:
        # Attempt to load as JSON. If successful, extract text if it's a simple value or a dictionary with a 'response' key.
        response_json = json.loads(response)
        if isinstance(response_json, str):
            return response_json.strip()
        elif isinstance(response_json, dict) and 'response' in response_json and isinstance(response_json['response'], str):
            return response_json['response'].strip()
        elif isinstance(response_json, dict):
            # If it's a dictionary, try to stringify it (though this might not be ideal, better to avoid sending JSON)
            return "" # Returning empty string to avoid accidental JSON output
        elif isinstance(response_json, list):
            return "" # Returning empty string to avoid accidental list output
    except json.JSONDecodeError:
        # If it's not valid JSON, proceed with further filtering

        # Remove any code blocks or other structured data that might resemble system output
        filtered_response = re.sub(r"```[\w\W]*?```", "", filtered_response)
        filtered_response = re.sub(r"`[^`]+`", "", filtered_response)

    # Further cleanup: remove extra whitespace and newlines
    filtered_response = "\n".join(line.strip() for line in filtered_response.splitlines() if line.strip())

    return filtered_response.strip()

async def transcribe_voice(file_path: str) -> Optional[str]:
    try:
        r = sr.Recognizer()
        with sr.AudioFile(file_path) as source:
            logger.info(f"–û—Ç–∫—Ä—ã—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {file_path}")
            audio_data = r.record(source)  # –°—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å—å –∞—É–¥–∏–æ—Ñ–∞–π–ª
            logger.info("–ê—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã.")
            try:
                logger.info("–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏...")
                text = r.recognize_google(audio_data, language="ru-RU")
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
                return text
            except sr.UnknownValueError:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–∏.")
                return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å."
            except sr.RequestError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
                return f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ."
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")

async def _get_effective_style(chat_id: int, user_id: int, user_name: Optional[str], chat_type: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if chat_type in ['group', 'supergroup'] and chat_id in group_preferences and user_id in group_preferences[chat_id]:
        return group_preferences[chat_id][user_id]
    return DEFAULT_STYLE

def _construct_prompt(history: Deque[str], chat_type: str, user_names_in_chat: Optional[Set[str]] = None) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞."""
    formatted_prompt = "\n".join(history)
    if chat_type in ['group', 'supergroup'] and user_names_in_chat:
        return f"–í —ç—Ç–æ–º –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ —É—á–∞—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {', '.join(user_names_in_chat)}\n\n{formatted_prompt}"
    else:
        return formatted_prompt

async def update_user_info(update: Update):
    if update.effective_user:
        user_id = update.effective_user.id
        username = update.effective_user.username
        first_name = update.effective_user.first_name
        profile_link = f"https://t.me/{username}" if username else None

        if user_id not in user_info_db:
            user_info_db[user_id] = {"preferences": {}}

        user_info_db[user_id]["username"] = username
        user_info_db[user_id]["first_name"] = first_name
        user_info_db[user_id]["profile_link"] = profile_link

def is_addressed_to_other_user(text: str, bot_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    words = text.split()
    if not words:
        return False
    first_word = words[0].lower().rstrip(':,!?;.')
    bot_name_lower = bot_name.lower()
    if first_word != bot_name_lower and not first_word.startswith('@' + bot_name_lower.rstrip('–∞')):
        return True
    return False

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message or not update.message.text:
        return

    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    prompt_text = update.message.text
    chat_type = update.effective_chat.type
    user_name = user_preferred_name.get(user_id, update.effective_user.first_name)

    history_key = chat_id # –û–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
    await update_user_info(update)

    add_to_history(history_key, USER_ROLE, f"{user_name}: {prompt_text}", user_name=user_name) # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –≥—Ä—É–ø–ø—ã

    if chat_type == 'private':
        effective_style = await _get_effective_style(chat_id, user_id, user_name, chat_type)
        system_message = f"{effective_style} –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ {user_name}, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã - {settings.BOT_NAME}."
        add_to_history(history_key, SYSTEM_ROLE, system_message)

        prompt_lines = chat_history.get(history_key, deque(maxlen=MAX_HISTORY))
        prompt = _construct_prompt(prompt_lines, chat_type)

        logger.info(f"Prompt sent to Gemini (private chat): {prompt}")
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING)
        await asyncio.sleep(random.uniform(0.5, 1.5))
        response = await asyncio.to_thread(generate_content, prompt)
        logger.info(f"Raw Gemini response (private chat): {response}")
        filtered = filter_response(response)
        logger.info(f"Filtered response (private chat): {filtered}")

        if filtered:
            add_to_history(history_key, ASSISTANT_ROLE, filtered)
            logger.info(f"About to send filtered response (private chat): '{filtered}'")
            await update.message.reply_text(filtered, parse_mode=None)

            if len(prompt_text.split()) < 10:
                learned_responses[prompt_text] = filtered
                logger.info(f"–ó–∞–ø–æ–º–Ω–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (private chat): '{prompt_text}': '{filtered}'")

        else:
            logger.warning("Filtered response was empty (private chat).")
            await update.message.reply_text("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.")

    elif chat_type in ['group', 'supergroup']:
        bot_username = context.bot.username
        mentioned = bot_username.lower() in prompt_text.lower() or \
                    settings.BOT_NAME.lower() in prompt_text.lower() or \
                    settings.BOT_NAME.lower().rstrip('–∞') in prompt_text.lower() or \
                    (settings.BOT_NAME.lower().endswith('–∞') and settings.BOT_NAME.lower()[:-1] + '–µ–Ω—å–∫–∞' in prompt_text.lower())

        is_reply_to_bot = update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id

        addressed_to_other = is_addressed_to_other_user(prompt_text, settings.BOT_NAME)

        responded = False # –§–ª–∞–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

        user_names_in_chat = set() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–¥–µ—Å—å

        if mentioned or is_reply_to_bot:
            effective_style = await _get_effective_style(chat_id, user_id, user_name, chat_type)
            system_message = f"{effective_style} –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ {user_name}, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ. –°—Ç–∞—Ä–∞–π—Å—è, —á—Ç–æ–±—ã —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –±—ã–ª —É–º–µ—Å—Ç–µ–Ω –≤ –æ–±—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–µ—Å–µ–¥—ã. –û—Ç–≤–µ—á–∞–π –æ—Ç –∏–º–µ–Ω–∏ {settings.BOT_NAME}."
            add_to_history(history_key, SYSTEM_ROLE, system_message)

            prompt_lines = chat_history.get(history_key, deque(maxlen=MAX_HISTORY))
            if chat_type in ['group', 'supergroup']:
                for line in prompt_lines:
                    if line.startswith('User'):
                        try:
                            username = line.split('(')[1].split(')')[0]
                            user_names_in_chat.add(username)
                        except IndexError:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {line}")
                            continue
            prompt = _construct_prompt(prompt_lines, chat_type, user_names_in_chat)

            logger.info(f"Prompt sent to Gemini (group chat, responding to {user_name}): {prompt}")
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING)
            await asyncio.sleep(random.uniform(0.5, 1.5))
            response = await asyncio.to_thread(generate_content, prompt)
            filtered = filter_response(response)
            if filtered:
                add_to_history(history_key, ASSISTANT_ROLE, filtered) # –ò–º—è –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                await update.message.reply_text(filtered, parse_mode=None)
                last_bot_message_to_user_in_group[user_id] = filtered # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                responded = True
            else:
                logger.warning(f"Filtered response was empty (group chat) for user {user_name}.")

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if not responded and not addressed_to_other:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—Å–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞ –∑–∞–º–æ–ª—á–∞—Ç—å
            if chat_id in user_muted_in_chat and user_id in user_muted_in_chat[chat_id]:
                logger.info(f"Proactive response skipped for user {user_id} in chat {chat_id} (user muted).")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –±–æ—Ç –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–ø—Ä–∞–≤–ª–µ–Ω
            if chat_id in bot_was_recently_corrected and bot_was_recently_corrected[chat_id]:
                logger.info(f"Proactive response skipped in chat {chat_id} due to recent correction.")
                # –ú–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º –ø—Ä—è–º–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
                asyncio.create_task(reset_correction_flag(chat_id, 30)) # –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
            proactive_probability = chat_proactive_probabilities.get(chat_id, settings.GLOBAL_PROACTIVE_PROBABILITY)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ evaluation_prompt
            last_few_messages = list(chat_history.get(history_key, deque()))[-5:]
            history_for_evaluation = "\n".join(last_few_messages)

            mood = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è mood –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            topic = "–æ–±—â–µ–Ω–∏–µ" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è topic –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            # –†–µ—à–∞–µ–º, –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ª–∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30% –æ—Ç —Ç–µ–∫—É—â–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏)
            if random.random() < proactive_probability * 0.3: # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –±–∞–∑–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è
                context_analysis_prompt = f"""–¢—ã - {settings.BOT_NAME}. –û—Ü–µ–Ω–∏ —Ç–æ–Ω –∏ —Ç–µ–º—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ: "{' '.join(last_few_messages)}". –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ, –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ, —à—É—Ç–ª–∏–≤–æ–µ, —Å–µ—Ä—å–µ–∑–Ω–æ–µ) –∏ –æ —á–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ–≤–æ—Ä—è—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: [–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ], –¢–µ–º–∞: [—Ç–µ–º–∞]". –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞–ª–æ, —É–∫–∞–∂–∏ —ç—Ç–æ."""
                logger.info(f"Context analysis prompt sent to Gemini: {context_analysis_prompt}")
                context_analysis_response = await asyncio.to_thread(generate_content, context_analysis_prompt)
                logger.info(f"Context analysis response: {context_analysis_response}")

                if "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:" in context_analysis_response and "–¢–µ–º–∞:" in context_analysis_response:
                    try:
                        mood = context_analysis_response.split("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:")[1].split(",")[0].strip()
                        topic = context_analysis_response.split("–¢–µ–º–∞:")[1].strip()
                    except IndexError:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")

                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø—Ä–∏–º–µ—Ä)
                dynamic_style = f"–¢—ã - {settings.BOT_NAME}, 25-–ª–µ—Ç–Ω—è—è –¥–µ–≤—É—à–∫–∞ –∏–∑ –†–æ—Å—Ç–æ–≤–∞ –í–µ–ª–∏–∫–æ–≥–æ. "
                if mood == "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ" or mood == "—à—É—Ç–ª–∏–≤–æ–µ":
                    dynamic_style += "–¢—ã –æ—á–µ–Ω—å –≤–µ—Å–µ–ª–∞—è –∏ –ª—é–±–∏—à—å —à—É—Ç–∫–∏. "
                elif mood == "–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ":
                    dynamic_style += "–¢—ã –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É—Å—Ç–Ω–∞—è, –Ω–æ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –±—ã—Ç—å –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–π. "
                else:
                    dynamic_style += "–¢—ã –æ–±—â–∏—Ç–µ–ª—å–Ω–∞—è –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è. "
                dynamic_style += f"–°–µ–π—á–∞—Å –≤ —á–∞—Ç–µ –æ–±—Å—É–∂–¥–∞—é—Ç —Ç–µ–º—É: '{topic}'. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ —ç—Ç–æ–º –∫–ª—é—á–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å. –¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∏ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω—ã–π. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã - {settings.BOT_NAME}."
            else:
                dynamic_style = settings.DEFAULT_STYLE

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            evaluation_prompt = f"""{dynamic_style}

            –£—á–∏—Ç—ã–≤–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –æ—Ç {user_name}: "{prompt_text}", –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π): "{history_for_evaluation}", —Å—á–∏—Ç–∞–µ—à—å –ª–∏ —Ç—ã –Ω—É–∂–Ω—ã–º –∫–∞–∫-—Ç–æ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ {settings.BOT_NAME}?

            –û—Ç–≤–µ—Ç—å: "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å." —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –∫ –≥—Ä—É–ø–ø–µ, –∏–ª–∏ –µ—Å–ª–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ —Ç–≤–æ–µ –º–æ–ª—á–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å—Ç—Ä–∞–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–µ—Å–µ–¥—ã –∏ —Ç–≤–æ–µ —É—á–∞—Å—Ç–∏–µ –º–æ–∂–µ—Ç –æ–∂–∏–≤–∏—Ç—å —á–∞—Ç. –ù–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Ä–µ–ø–ª–∏–∫–∏, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –ø—Ä–æ—â–∞–Ω–∏—è, –µ—Å–ª–∏ –∫ —Ç–µ–±–µ –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.

            –ü—Ä–∏–º–µ—Ä—ã:
            - "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å." –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å –∫ –≥—Ä—É–ø–ø–µ.
            - "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å." –µ—Å–ª–∏ —Ç–≤–æ–µ –º–æ–ª—á–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å—Ç—Ä–∞–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–µ—Å–µ–¥—ã.
            - "–ù–µ –æ—Ç–≤–µ—á–∞–π." –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω–æ–π —Ä–µ–ø–ª–∏–∫–æ–π, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏–ª–∏ –ø—Ä–æ—â–∞–Ω–∏–µ–º, –µ—Å–ª–∏ –∫ —Ç–µ–±–µ –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å.
            - "–ù–µ –æ—Ç–≤–µ—á–∞–π." –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–Ω–æ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –¥–∞–∂–µ –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç–æ —Ç–≤–æ–µ –∏–º—è.

            –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã –∏–ª–∏ —Å–ª–æ–∂–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, —É–∫–∞–∂–∏ —ç—Ç–æ."""

            logger.info(f"Evaluation prompt sent to Gemini: {evaluation_prompt}")
            evaluation_response = await asyncio.to_thread(generate_content, evaluation_prompt)
            logger.info(f"Evaluation response: {evaluation_response}")

            if "–±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å" in evaluation_response.lower():
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
                if random.random() < proactive_probability:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
                    effective_style = await _get_effective_style(chat_id, user_id, user_name, chat_type)
                    system_message = f"{effective_style} –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–Ω–æ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É, –¥–∞–∂–µ –µ—Å–ª–∏ –∫ —Ç–µ–±–µ –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –æ–±—Ä–∞—â–∞—é—Ç—Å—è. –°—Ç–∞—Ä–∞–π—Å—è –±—ã—Ç—å —É–º–µ—Å—Ç–Ω–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è —Ç–µ–∫—É—â—É—é —Ç–µ–º—É: '{topic}'. –û—Ç–≤–µ—á–∞–π –æ—Ç –∏–º–µ–Ω–∏ {settings.BOT_NAME}."
                    add_to_history(history_key, SYSTEM_ROLE, system_message)

                    prompt_lines = chat_history.get(history_key, deque(maxlen=MAX_HISTORY))
                    # user_names_in_chat —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ
                    prompt = _construct_prompt(prompt_lines, chat_type, user_names_in_chat)

                    logger.info(f"Prompt sent to Gemini (group chat, proactive response based on evaluation): {prompt}")
                    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING)
                    await asyncio.sleep(random.uniform(1.0, 2.5)) # –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
                    response = await asyncio.to_thread(generate_content, prompt)
                    filtered = filter_response(response)
                    if filtered:
                        add_to_history(history_key, ASSISTANT_ROLE, filtered)
                        await update.message.reply_text(filtered, parse_mode=None)
                    else:
                        logger.warning(f"Filtered proactive response (based on evaluation) was empty (group chat).")
                else:
                    logger.info(f"Proactive response skipped due to chat probability ({proactive_probability:.2f}).")

    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞: {chat_type}")

async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update or not update.message or not update.message.voice:
            return

        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        voice = update.message.voice
        chat_type = update.effective_chat.type
        user_name = user_preferred_name.get(user_id, update.effective_user.first_name) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è

        history_key = chat_id # –û–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
        await update_user_info(update)

        file = await voice.get_file()
        original_file_path = await file.download_to_drive()
        file_path = original_file_path

        if not str(file_path).lower().endswith(".wav"):
            try:
                audio = AudioSegment.from_file(file_path)
                wav_path = str(file_path).rsplit('.', 1)[0] + ".wav"
                audio.export(wav_path, format="wav")
                file_path = wav_path
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WAV (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ): {e}")
                if os.path.exists(original_file_path):
                    os.remove(original_file_path)
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return

        transcribed_text = await transcribe_voice(file_path)

        if transcribed_text:
            if transcribed_text.startswith("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"):
                await update.message.reply_text(transcribed_text)
                return
            elif transcribed_text.startswith("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏") or transcribed_text.startswith("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ"):
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {transcribed_text}")
                return

            logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}: \"{transcribed_text}\"")
            add_to_history(history_key, USER_ROLE, f"{user_name}: {transcribed_text}", user_name=user_name) # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –≥—Ä—É–ø–ø—ã

            if chat_type == 'private':
                effective_style = await _get_effective_style(chat_id, user_id, user_name, chat_type)
                system_message = f"{effective_style} –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ {user_name}, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã - {settings.BOT_NAME}."
                add_to_history(history_key, SYSTEM_ROLE, system_message)

                prompt_lines = chat_history.get(history_key, deque(maxlen=MAX_HISTORY))
                prompt = _construct_prompt(prompt_lines, chat_type)

                logger.info(f"Prompt sent to Gemini (private voice): {prompt}")
                await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING)
                await asyncio.sleep(random.uniform(0.5, 1.5))
                response = await asyncio.to_thread(generate_content, prompt)
                logger.info(f"Raw Gemini response (private voice): {response}")
                filtered = filter_response(response)
                logger.info(f"Filtered response (private voice): {filtered}")

                if filtered:
                    add_to_history(history_key, ASSISTANT_ROLE, filtered)
                    logger.info(f"About to send filtered response (private voice): '{filtered}'")
                    await update.message.reply_text(filtered, parse_mode=None)

                    if len(transcribed_text.split()) < 10:
                        learned_responses[transcribed_text] = filtered
                        logger.info(f"–ó–∞–ø–æ–º–Ω–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (private voice): '{transcribed_text}': '{filtered}'")

                else:
                    logger.warning("Filtered response was empty (private voice).")
                    await update.message.reply_text("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.")

            elif chat_type in ['group', 'supergroup']:
                bot_username = context.bot.username
                mentioned = bot_username.lower() in transcribed_text.lower() or \
                            settings.BOT_NAME.lower() in transcribed_text.lower() or \
                            settings.BOT_NAME.lower().rstrip('–∞') in transcribed_text.lower() or \
                            (settings.BOT_NAME.lower().endswith('–∞') and settings.BOT_NAME.lower()[:-1] + '–µ–Ω—å–∫–∞' in transcribed_text.lower())

                is_reply_to_bot = update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id

                addressed_to_other = is_addressed_to_other_user(transcribed_text, settings.BOT_NAME)

                responded_to_voice = False

                user_names_in_chat = set() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–¥–µ—Å—å

                if mentioned or is_reply_to_bot:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    effective_style = await _get_effective_style(chat_id, user_id, user_name, chat_type)

                    system_message = f"{effective_style} –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ {user_name}, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ. –°—Ç–∞—Ä–∞–π—Å—è, —á—Ç–æ–±—ã —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –±—ã–ª —É–º–µ—Å—Ç–µ–Ω –≤ –æ–±—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–µ—Å–µ–¥—ã. –û—Ç–≤–µ—á–∞–π –æ—Ç –∏–º–µ–Ω–∏ {settings.BOT_NAME}."

                    add_to_history(history_key, SYSTEM_ROLE, system_message)

                    prompt_lines = chat_history.get(history_key, deque(maxlen=MAX_HISTORY))
                    if chat_type in ['group', 'supergroup']:
                        for line in prompt_lines:
                            if line.startswith('User'):
                                try:
                                    username = line.split('(')[1].split(')')[0]
                                    user_names_in_chat.add(username)
                                except IndexError:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {line}")
                                    continue
                    prompt = _construct_prompt(prompt_lines, chat_type, user_names_in_chat)

                    logger.info(f"Prompt sent to Gemini (group voice, responding to {user_name}): {prompt}")
                    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING)
                    await asyncio.sleep(random.uniform(0.5, 1.5))
                    response = await asyncio.to_thread(generate_content, prompt)
                    logger.info(f"Raw Gemini response (group voice): {response}")
                    filtered = filter_response(response)
                    logger.info(f"Filtered response (group voice): {filtered}")

                    if filtered:
                        add_to_history(history_key, ASSISTANT_ROLE, filtered)
                        await update.message.reply_text(filtered, parse_mode=None)
                        last_bot_message_to_user_in_group[user_id] = filtered
                        responded_to_voice = True
                    else:
                        logger.warning(f"Filtered response was empty (group voice) for user {user_name}.")

                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not responded_to_voice and not addressed_to_other:
                    user_id = update.effective_user.id
                    chat_id = update.effective_chat.id

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—Å–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞ –∑–∞–º–æ–ª—á–∞—Ç—å
                    if chat_id in user_muted_in_chat and user_id in user_muted_in_chat[chat_id]:
                        logger.info(f"Proactive voice response skipped for user {user_id} in chat {chat_id} (user muted).")
                        return

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –±–æ—Ç –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–ø—Ä–∞–≤–ª–µ–Ω
                    if chat_id in bot_was_recently_corrected and bot_was_recently_corrected[chat_id]:
                        logger.info(f"Proactive voice response skipped in chat {chat_id} due to recent correction.")
                        asyncio.create_task(reset_correction_flag(chat_id, 30))
                        return

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
                    proactive_probability = chat_proactive_probabilities.get(chat_id, settings.GLOBAL_PROACTIVE_PROBABILITY)

                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ evaluation_prompt
                    last_few_messages = list(chat_history.get(history_key, deque()))[-5:]
                    history_for_evaluation = "\n".join(last_few_messages)

                    # –†–µ—à–∞–µ–º, –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ª–∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30% –æ—Ç —Ç–µ–∫—É—â–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏)
                    if random.random() < proactive_probability * 0.3: # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –±–∞–∑–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
                        evaluation_prompt = f"""–¢—ã - {settings.BOT_NAME}, {settings.DEFAULT_STYLE.split('.')[0].split(',')[1].strip()} –∏–∑ –†–æ—Å—Ç–æ–≤–∞ –í–µ–ª–∏–∫–æ–≥–æ. {settings.DEFAULT_STYLE.split('.')[2].strip()} {settings.DEFAULT_STYLE.split('.')[3].strip()} {settings.DEFAULT_STYLE.split('.')[4].strip()} {settings.DEFAULT_STYLE.split('.')[5].strip()}

                        –£—á–∏—Ç—ã–≤–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –æ—Ç {user_name} —Å —Ç–µ–∫—Å—Ç–æ–º: "{transcribed_text}", –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π): "{history_for_evaluation}", —Å—á–∏—Ç–∞–µ—à—å –ª–∏ —Ç—ã –Ω—É–∂–Ω—ã–º –∫–∞–∫-—Ç–æ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ {settings.BOT_NAME}?

                        –û—Ç–≤–µ—Ç—å: "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å." —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –∫ –≥—Ä—É–ø–ø–µ, –∏–ª–∏ –µ—Å–ª–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ —Ç–≤–æ–µ –º–æ–ª—á–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å—Ç—Ä–∞–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–µ—Å–µ–¥—ã –∏ —Ç–≤–æ–µ —É—á–∞—Å—Ç–∏–µ –º–æ–∂–µ—Ç –æ–∂–∏–≤–∏—Ç—å —á–∞—Ç. –ù–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Ä–µ–ø–ª–∏–∫–∏, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –ø—Ä–æ—â–∞–Ω–∏—è, –µ—Å–ª–∏ –∫ —Ç–µ–±–µ –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.

                        –ü—Ä–∏–º–µ—Ä—ã:
                        - "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å." –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å –∫ –≥—Ä—É–ø–ø–µ.
                        - "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å." –µ—Å–ª–∏ —Ç–≤–æ–µ –º–æ–ª—á–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å—Ç—Ä–∞–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–µ—Å–µ–¥—ã.
                        - "–ù–µ –æ—Ç–≤–µ—á–∞–π." –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω–æ–π —Ä–µ–ø–ª–∏–∫–æ–π, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏–ª–∏ –ø—Ä–æ—â–∞–Ω–∏–µ–º, –µ—Å–ª–∏ –∫ —Ç–µ–±–µ –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å.
                        - "–ù–µ –æ—Ç–≤–µ—á–∞–π." –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–Ω–æ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –¥–∞–∂–µ –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç–æ —Ç–≤–æ–µ –∏–º—è.

                        –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã –∏–ª–∏ —Å–ª–æ–∂–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, —É–∫–∞–∂–∏ —ç—Ç–æ."""

                        logger.info(f"Evaluation prompt sent to Gemini (voice): {evaluation_prompt}")
                        evaluation_response = await asyncio.to_thread(generate_content, evaluation_prompt)
                        logger.info(f"Evaluation response (voice): {evaluation_response}")

                        if "–±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å" in evaluation_response.lower():
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
                            if random.random() < proactive_probability:
                                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
                                effective_style = await _get_effective_style(chat_id, user_id, user_name, chat_type)
                                system_message = f"{effective_style} –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–Ω–æ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É, –¥–∞–∂–µ –µ—Å–ª–∏ –∫ —Ç–µ–±–µ –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –æ–±—Ä–∞—â–∞—é—Ç—Å—è. –û—Ç–≤–µ—á–∞–π –æ—Ç –∏–º–µ–Ω–∏ {settings.BOT_NAME}, —Å—Ç–∞—Ä–∞—è—Å—å –±—ã—Ç—å —É–º–µ—Å—Ç–Ω–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞."
                                add_to_history(history_key, SYSTEM_ROLE, system_message)

                                prompt_lines = chat_history.get(history_key, deque(maxlen=MAX_HISTORY))
                                prompt = _construct_prompt(prompt_lines, chat_type, user_names_in_chat)

                                logger.info(f"Prompt sent to Gemini (group voice, proactive response based on evaluation): {prompt}")
                                await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING)
                                await asyncio.sleep(random.uniform(1.0, 2.5)) # –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
                                response = await asyncio.to_thread(generate_content, prompt)
                                filtered = filter_response(response)
                                if filtered:
                                    add_to_history(history_key, ASSISTANT_ROLE, filtered)
                                    await update.message.reply_text(filtered, parse_mode=None)
                                else:
                                    logger.warning(f"Filtered proactive response (based on evaluation) was empty (group voice).")
                            else:
                                logger.info("Proactive voice response skipped due to probability factor.")

            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {chat_type}")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≤–∞—à–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

async def handle_video_note_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update or not update.message or not update.message.video_note:
            return

        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        video_note = update.message.video_note
        chat_type = update.effective_chat.type
        user_name = user_preferred_name.get(user_id, update.effective_user.first_name) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è

        history_key = chat_id # –û–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
        await update_user_info(update)

        file = await video_note.get_file()
        original_file_path = await file.download_to_drive()
        file_path = original_file_path

        # –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ WAV (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è ffmpeg –∏–ª–∏ –¥—Ä—É–≥–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
        wav_path = str(file_path).rsplit('.', 1)[0] + ".wav"
        try:
            audio = AudioSegment.from_file(file_path)
            audio.export(wav_path, format="wav")
            file_path = wav_path
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –≤ WAV: {e}")
            if os.path.exists(original_file_path):
                os.remove(original_file_path)
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ).")
            return

        transcribed_text = await transcribe_voice(file_path)

        if transcribed_text:
            if transcribed_text.startswith("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"):
                await update.message.reply_text(transcribed_text)
                return
            elif transcribed_text.startswith("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏") or transcribed_text.startswith("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ"):
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∞—É–¥–∏–æ).")
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ: {transcribed_text}")
                return

            logger.info(f"–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}: \"{transcribed_text}\"")
            add_to_history(history_key, USER_ROLE, f"{user_name}: {transcribed_text}", user_name=user_name) # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –≥—Ä—É–ø–ø—ã

            if chat_type == 'private':
                effective_style = await _get_effective_style(chat_id, user_id, user_name, chat_type)
                system_message = f"{effective_style} –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ {user_name}, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã - {settings.BOT_NAME}."
                add_to_history(history_key, SYSTEM_ROLE, system_message)

                prompt_lines = chat_history.get(history_key, deque(maxlen=MAX_HISTORY))
                prompt = _construct_prompt(prompt_lines, chat_type)

                logger.info(f"Prompt sent to Gemini (private video note): {prompt}")
                await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING)
                await asyncio.sleep(random.uniform(0.5, 1.5))
                response = await asyncio.to_thread(generate_content, prompt)
                logger.info(f"Raw Gemini response (private video note): {response}")
                filtered = filter_response(response)
                logger.info(f"Filtered response (private video note): {filtered}")

                if filtered:
                    add_to_history(history_key, ASSISTANT_ROLE, filtered)
                    logger.info(f"About to send filtered response (private video note): '{filtered}'")
                    await update.message.reply_text(filtered, parse_mode=None)

                    if len(transcribed_text.split()) < 10:
                        learned_responses[transcribed_text] = filtered
                        logger.info(f"–ó–∞–ø–æ–º–Ω–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (private video note): '{transcribed_text}': '{filtered}'")

                else:
                    logger.warning("Filtered response was empty (private video note).")
                    await update.message.reply_text("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.")

            elif chat_type in ['group', 'supergroup']:
                bot_username = context.bot.username
                mentioned = bot_username.lower() in transcribed_text.lower() or \
                            settings.BOT_NAME.lower() in transcribed_text.lower() or \
                            settings.BOT_NAME.lower().rstrip('–∞') in transcribed_text.lower() or \
                            (settings.BOT_NAME.lower().endswith('–∞') and settings.BOT_NAME.lower()[:-1] + '–µ–Ω—å–∫–∞' in transcribed_text.lower())

                is_reply_to_bot = update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id

                addressed_to_other = is_addressed_to_other_user(transcribed_text, settings.BOT_NAME)

                responded_to_video_note = False

                user_names_in_chat = set() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–¥–µ—Å—å

                if mentioned or is_reply_to_bot:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    effective_style = await _get_effective_style(chat_id, user_id, user_name, chat_type)

                    system_message = f"{effective_style} –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ {user_name}, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ. –°—Ç–∞—Ä–∞–π—Å—è, —á—Ç–æ–±—ã —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –±—ã–ª —É–º–µ—Å—Ç–µ–Ω –≤ –æ–±—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–µ—Å–µ–¥—ã. –û—Ç–≤–µ—á–∞–π –æ—Ç –∏–º–µ–Ω–∏ {settings.BOT_NAME}."

                    add_to_history(history_key, SYSTEM_ROLE, system_message)

                    prompt_lines = chat_history.get(history_key, deque(maxlen=MAX_HISTORY))
                    if chat_type in ['group', 'supergroup']:
                        for line in prompt_lines:
                            if line.startswith('User'):
                                try:
                                    username = line.split('(')[1].split(')')[0]
                                    user_names_in_chat.add(username)
                                except IndexError:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {line}")
                                    continue
                    prompt = _construct_prompt(prompt_lines, chat_type, user_names_in_chat)

                    logger.info(f"Prompt sent to Gemini (group video note, responding to {user_name}): {prompt}")
                    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING)
                    await asyncio.sleep(random.uniform(0.5, 1.5))
                    response = await asyncio.to_thread(generate_content, prompt)
                    logger.info(f"Raw Gemini response (group video note): {response}")
                    filtered = filter_response(response)
                    logger.info(f"Filtered response (group video note): {filtered}")

                    if filtered:
                        add_to_history(history_key, ASSISTANT_ROLE, filtered)
                        await update.message.reply_text(filtered, parse_mode=None)
                        last_bot_message_to_user_in_group[user_id] = filtered
                        responded_to_video_note = True
                    else:
                        logger.warning(f"Filtered response was empty (group video note) for user {user_name}.")

                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ
                if not responded_to_video_note and not addressed_to_other:
                    user_id = update.effective_user.id
                    chat_id = update.effective_chat.id

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—Å–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞ –∑–∞–º–æ–ª—á–∞—Ç—å
                    if chat_id in user_muted_in_chat and user_id in user_muted_in_chat[chat_id]:
                        logger.info(f"Proactive video note response skipped for user {user_id} in chat {chat_id} (user muted).")
                        return

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –±–æ—Ç –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–ø—Ä–∞–≤–ª–µ–Ω
                    if chat_id in bot_was_recently_corrected and bot_was_recently_corrected[chat_id]:
                        logger.info(f"Proactive video note response skipped in chat {chat_id} due to recent correction.")
                        asyncio.create_task(reset_correction_flag(chat_id, 30))
                        return

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
                    proactive_probability = chat_proactive_probabilities.get(chat_id, settings.GLOBAL_PROACTIVE_PROBABILITY)

                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ evaluation_prompt
                    last_few_messages = list(chat_history.get(history_key, deque()))[-5:]
                    history_for_evaluation = "\n".join(last_few_messages)

                    # –†–µ—à–∞–µ–º, –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ª–∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30% –æ—Ç —Ç–µ–∫—É—â–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏)
                    if random.random() < proactive_probability * 0.3: # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –±–∞–∑–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
                        evaluation_prompt = f"""–¢—ã - {settings.BOT_NAME}, {settings.DEFAULT_STYLE.split('.')[0].split(',')[1].strip()} –∏–∑ –†–æ—Å—Ç–æ–≤–∞ –í–µ–ª–∏–∫–æ–≥–æ. {settings.DEFAULT_STYLE.split('.')[2].strip()} {settings.DEFAULT_STYLE.split('.')[3].strip()} {settings.DEFAULT_STYLE.split('.')[4].strip()} {settings.DEFAULT_STYLE.split('.')[5].strip()}

                        –£—á–∏—Ç—ã–≤–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –æ—Ç {user_name} —Å —Ç–µ–∫—Å—Ç–æ–º: "{transcribed_text}", –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π): "{history_for_evaluation}", —Å—á–∏—Ç–∞–µ—à—å –ª–∏ —Ç—ã –Ω—É–∂–Ω—ã–º –∫–∞–∫-—Ç–æ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ {settings.BOT_NAME}?

                        –û—Ç–≤–µ—Ç—å: "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å." —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –∫ –≥—Ä—É–ø–ø–µ, –∏–ª–∏ –µ—Å–ª–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ —Ç–≤–æ–µ –º–æ–ª—á–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å—Ç—Ä–∞–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–µ—Å–µ–¥—ã –∏ —Ç–≤–æ–µ —É—á–∞—Å—Ç–∏–µ –º–æ–∂–µ—Ç –æ–∂–∏–≤–∏—Ç—å —á–∞—Ç. –ù–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Ä–µ–ø–ª–∏–∫–∏, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –ø—Ä–æ—â–∞–Ω–∏—è, –µ—Å–ª–∏ –∫ —Ç–µ–±–µ –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.

                        –ü—Ä–∏–º–µ—Ä—ã:
                        - "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å." –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å –∫ –≥—Ä—É–ø–ø–µ.
                        - "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å." –µ—Å–ª–∏ —Ç–≤–æ–µ –º–æ–ª—á–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å—Ç—Ä–∞–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–µ—Å–µ–¥—ã.
                        - "–ù–µ –æ—Ç–≤–µ—á–∞–π." –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω–æ–π —Ä–µ–ø–ª–∏–∫–æ–π, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏–ª–∏ –ø—Ä–æ—â–∞–Ω–∏–µ–º, –µ—Å–ª–∏ –∫ —Ç–µ–±–µ –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å.
                        - "–ù–µ –æ—Ç–≤–µ—á–∞–π." –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–Ω–æ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –¥–∞–∂–µ –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç–æ —Ç–≤–æ–µ –∏–º—è.

                        –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã –∏–ª–∏ —Å–ª–æ–∂–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, —É–∫–∞–∂–∏ —ç—Ç–æ."""

                        logger.info(f"Evaluation prompt sent to Gemini (video note): {evaluation_prompt}")
                        evaluation_response = await asyncio.to_thread(generate_content, evaluation_prompt)
                        logger.info(f"Evaluation response (video note): {evaluation_response}")

                        if "–±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å" in evaluation_response.lower():
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
                            if random.random() < proactive_probability:
                                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
                                effective_style = await _get_effective_style(chat_id, user_id, user_name, chat_type)
                                system_message = f"{effective_style} –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–Ω–æ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É, –¥–∞–∂–µ –µ—Å–ª–∏ –∫ —Ç–µ–±–µ –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –æ–±—Ä–∞—â–∞—é—Ç—Å—è. –û—Ç–≤–µ—á–∞–π –æ—Ç –∏–º–µ–Ω–∏ {settings.BOT_NAME}, —Å—Ç–∞—Ä–∞—è—Å—å –±—ã—Ç—å —É–º–µ—Å—Ç–Ω–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞."
                                add_to_history(history_key, SYSTEM_ROLE, system_message)

                                prompt_lines = chat_history.get(history_key, deque(maxlen=MAX_HISTORY))
                                prompt = _construct_prompt(prompt_lines, chat_type, user_names_in_chat)

                                logger.info(f"Prompt sent to Gemini (group video note, proactive response based on evaluation): {prompt}")
                                await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING)
                                await asyncio.sleep(random.uniform(1.0, 2.5)) # –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
                                response = await asyncio.to_thread(generate_content, prompt)
                                filtered = filter_response(response)
                                if filtered:
                                    add_to_history(history_key, ASSISTANT_ROLE, filtered)
                                    await update.message.reply_text(filtered, parse_mode=None)
                                else:
                                    logger.warning(f"Filtered proactive response (based on evaluation) was empty (group video note).")
                            else:
                                logger.info("Proactive video note response skipped due to probability factor.")

            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {chat_type}")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≤–∞—à–µ–º –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–∏.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø - {settings.BOT_NAME} –¥–∞–≤–∞–π –ø–æ–±–æ–ª—Ç–∞–µ–º?"
    )

async def remember_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    history_key = chat_id # –û–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã

    if context.args:
        memory = " ".join(context.args)
        add_to_history(history_key, SYSTEM_ROLE, f"–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {memory}")
        await update.message.reply_text(f"–ó–∞–ø–æ–º–Ω–∏–ª–∞: '{memory}'. –ë—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å.")

async def clear_my_history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton("–î–∞", callback_data=f'clear_history_{user_id}'),
          InlineKeyboardButton("–ù–µ—Ç", callback_data='cancel')]]
    )
    await update.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?", reply_markup=keyboard)

async def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith('clear_history_'):
        user_id = int(data.split('_')[2])
        if user_id == query.from_user.id:
            if user_id in chat_history:
                new_history = deque(item for item in chat_history.get(query.message.chat_id, deque()) if not item.startswith(f"User ({query.from_user.first_name}):") and not item.startswith(f"Assistant: {query.message.chat.first_name},"))
                chat_history[query.message.chat_id] = new_history
                await query.edit_message_text("–í–∞—à–∞ –ª–∏—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ –æ—á–∏—â–µ–Ω–∞.")
            else:
                await query.edit_message_text("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞.")
        else:
            await query.edit_message_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    elif data == 'cancel':
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def set_my_name_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if context.args:
        name = " ".join(context.args)
        user_preferred_name[user_id] = name
        await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –∫–∞–∫ {name}.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
    help_text += "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.\n"
    help_text += "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n"
    help_text += "/clear_my_history - –û—á–∏—Å—Ç–∏—Ç—å –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞.\n"
    help_text += "/setmyname <–∏–º—è> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —è –±—É–¥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è.\n"

    admin_commands = [
        ("/set_group_style (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) <—Å—Ç–∏–ª—å>", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ."),
        ("/reset_style", "–°–±—Ä–æ—Å–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π."),
        ("/clear_history <user_id>", "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ ID)."),
        ("/list_admins", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞."),
        ("/get_log", "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –±–æ—Ç–∞."),
        ("/delete (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)", "–£–¥–∞–ª–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."),
        ("/ban (@–Ω–∏–∫–Ω–µ–π–º | –æ—Ç–≤–µ—Ç)", "–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."),
        ("/set_default_style <–Ω–æ–≤—ã–π —Å—Ç–∏–ª—å>", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞."),
        ("/set_bot_name <–Ω–æ–≤–æ–µ –∏–º—è>", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –±–æ—Ç–∞."),
        ("/set_proactive_probability <–∑–Ω–∞—á–µ–Ω–∏–µ>", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."),
    ]

    user_id = update.effective_user.id
    if user_id in ADMIN_USER_IDS:
        help_text += "\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        for command, description in admin_commands:
            help_text += f"{command} - {description}\n"
    else:
        help_text += "\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"

    help_text += "\n–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    help_text += "–ú–∞—à–∞, –∑–∞–º–æ–ª—á–∏ - –ü–æ–ø—Ä–æ—Å–∏—Ç—å –±–æ—Ç–∞ –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –ª–∏—á–Ω–æ –¥–ª—è –≤–∞—Å.\n"
    help_text += "–ú–∞—à–∞, –Ω–∞—á–Ω–∏ –≥–æ–≤–æ—Ä–∏—Ç—å - –ü–æ–ø—Ä–æ—Å–∏—Ç—å –±–æ—Ç–∞ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n"

    await update.message.reply_text(help_text)

async def error_handler(update: object, context: CallbackContext):
    try:
        error = context.error
        if error:
            logger.error("Exception while handling update:", exc_info=error)

            error_msg = f"{type(error).__name__}: {str(error)}"
            if len(error_msg) > 200:
                error_msg = error_msg[:200] + "..."

            if ADMIN_USER_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=ADMIN_USER_IDS[0],
                        text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n{error_msg}"
                    )
                except Exception as e:
                    logger.error(f"Failed to send error notification: {e}")
    except Exception as e:
        logger.error(f"Error in error handler: {e}")

async def cleanup_audio_files(context: CallbackContext):
    bot_folder = "."  # –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç –±–æ—Ç–∞
    deleted_count = 0
    try:
        for filename in os.listdir(bot_folder):
            if filename.endswith(".oga") or filename.endswith(".wav"):
                file_path = os.path.join(bot_folder, filename)
                try:
                    os.remove(file_path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª: {file_path}")
                    deleted_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        if deleted_count > 0:
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.")
        else:
            logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {e}")

# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@admin_only
async def set_group_user_style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message or not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    user_id = update.message.reply_to_message.from_user.id
    chat_id = update.effective_chat.id
    style_prompt = " ".join(context.args)
    group_preferences.setdefault(chat_id, {})[user_id] = style_prompt
    await update.message.reply_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.reply_to_message.from_user.first_name}: {style_prompt}")

@admin_only
async def reset_style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global global_style
    global_style = settings.DEFAULT_STYLE
    await update.message.reply_text(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: {settings.DEFAULT_STYLE}")

@admin_only
async def clear_history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        try:
            user_id_to_clear = int(context.args[0])
            if user_id_to_clear in chat_history:
                new_history = deque(item for item in chat_history.get(update.effective_chat.id, deque()) if not item.startswith(f"User ({user_id_to_clear}):") and not item.startswith(f"Assistant:"))
                chat_history[update.effective_chat.id] = new_history
                await update.message.reply_text(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_clear} –≤ —ç—Ç–æ–º —á–∞—Ç–µ –æ—á–∏—â–µ–Ω–∞.")
            else:
                await update.message.reply_text(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_clear} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏.")

@admin_only
async def list_admins_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_list = ", ".join(map(str, ADMIN_USER_IDS))
    await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞: {admin_list}")

@admin_only
async def get_log_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.send_document(chat_id=update.effective_chat.id, document=InputFile("bot.log"))
    except FileNotFoundError:
        await update.message.reply_text("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {e}")

@admin_only
async def ban_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id_to_ban: Optional[int] = None
    username_to_ban: Optional[str] = None

    if update.message.reply_to_message:
        user_id_to_ban = update.message.reply_to_message.from_user.id
        username_to_ban = update.message.reply_to_message.from_user.username
    elif context.args:
        arg = context.args[0]
        if arg.startswith('@'):
            username_to_ban = arg
            try:
                chat = await context.bot.get_chat(username_to_ban)
                if chat.type != 'private':
                    user_id_to_ban = chat.id
                else:
                    await update.message.reply_text("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ —á–µ—Ä–µ–∑ –Ω–∏–∫–Ω–µ–π–º.")
                    return
            except Exception as e:
                logger.error(f"Error getting user from username: {e}")
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É.")
                return
        else:
            try:
                user_id_to_ban = int(arg)
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º (@nickname) –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞.")
                return
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º (@nickname) –¥–ª—è –±–∞–Ω–∞.")
        return

    if user_id_to_ban:
        chat_id = update.effective_chat.id
        try:
            await context.bot.ban_chat_member(chat_id=chat_id, user_id=user_id_to_ban)
            user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_ban}"
            if username_to_ban:
                user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username_to_ban} (ID: {user_id_to_ban})"
            await update.message.reply_text(f"{user_info} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
            logger.warning(f"Admin {update.effective_user.id} banned user {user_id_to_ban} in chat {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ, —É –±–æ—Ç–∞ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤ –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID/–Ω–∏–∫–Ω–µ–π–º.")

@admin_only
async def set_proactive_probability_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–æ—Ç 0.0 –¥–æ 1.0).")
        return
    try:
        probability = float(context.args[0])
        if 0.0 <= probability <= 1.0:
            chat_id = update.effective_chat.id
            chat_proactive_probabilities[chat_id] = probability
            await update.message.reply_text(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {probability:.2f}")
        else:
            await update.message.reply_text("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ—Ç 0.0 –¥–æ 1.0.")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏.")

# --- –ö–æ–Ω–µ—Ü –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---

# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞ ---
async def delete_message_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
        return
    try:
        chat_id = update.effective_chat.id
        message_id = update.message.reply_to_message.message_id
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.info(f"Admin {update.effective_user.id} deleted message {message_id} in chat {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, —É –±–æ—Ç–∞ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤.")

# --- –ö–æ–Ω–µ—Ü –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞ ---

async def silence_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    bot_username = context.bot.username
    mentioned = bot_username.lower() in update.message.text.lower() or \
                settings.BOT_NAME.lower() in update.message.text.lower()

    if mentioned and "–∑–∞–º–æ–ª—á–∏" in update.message.text.lower():
        user_muted_in_chat.setdefault(chat_id, set()).add(user_id)
        await update.message.reply_text("–•–æ—Ä–æ—à–æ, —è –±—É–¥—É –º–æ–ª—á–∞—Ç—å –¥–ª—è —Ç–µ–±—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –ø–æ–∫–∞ —Ç—ã —Å–Ω–æ–≤–∞ –Ω–µ –æ–±—Ä–∞—Ç–∏—à—å—Å—è –∫–æ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é.")

async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    bot_username = context.bot.username
    mentioned = bot_username.lower() in update.message.text.lower() or \
                settings.BOT_NAME.lower() in update.message.text.lower()

    if mentioned and "–Ω–∞—á–Ω–∏ –≥–æ–≤–æ—Ä–∏—Ç—å" in update.message.text.lower():
        if chat_id in user_muted_in_chat and user_id in user_muted_in_chat[chat_id]:
            user_muted_in_chat[chat_id].discard(user_id)
            await update.message.reply_text("–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —è —Å–Ω–æ–≤–∞ –±—É–¥—É –∏–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        else:
            await update.message.reply_text("–Ø –∏ —Ç–∞–∫ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é –≤ —ç—Ç–æ–º —á–∞—Ç–µ (–¥–ª—è —Ç–µ–±—è).")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message or not update.message.photo:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    user_name = user_preferred_name.get(user_id, update.effective_user.first_name)

    history_key = chat_id # –û–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
    await update_user_info(update)

    bot = context.bot
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–º –±–æ–ª—å—à–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
        file_id = update.message.photo[-1].file_id
        file_info = await bot.get_file(file_id)
        file_url = file_info.file_path

        response = requests.get(file_url)
        response.raise_for_status()
        image_data_bytes = BytesIO(response.content)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Pillow
        image = Image.open(image_data_bytes)

        effective_style = await _get_effective_style(chat_id, user_id, user_name, chat_type)
        system_message = f"{effective_style} –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ {user_name}, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ. –°—Ç–∞—Ä–∞–π—Å—è, —á—Ç–æ–±—ã —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –±—ã–ª —É–º–µ—Å—Ç–µ–Ω –≤ –æ–±—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–µ—Å–µ–¥—ã. –û—Ç–≤–µ—á–∞–π –æ—Ç –∏–º–µ–Ω–∏ {settings.BOT_NAME}."
        add_to_history(history_key, SYSTEM_ROLE, system_message)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–æ—Ç–æ
        caption = update.message.caption

        # –§–æ—Ä–º–∏—Ä—É–µ–º prompt —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if caption:
            prompt = f"–¢—ã {settings.BOT_NAME}. –û—Ç—Ä–µ–∞–≥–∏—Ä—É–π –Ω–∞ —Ñ–æ—Ç–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–µ–º—É —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∞ –±—ã {settings.BOT_NAME} –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞. –í–æ—Ç —Ñ–æ—Ç–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –§–æ—Ç–æ: [–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {caption}. –í—ã—Å–∫–∞–∂–∏ –º–Ω–µ–Ω–∏–µ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–π –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ –∏–ª–∏ –¥–∞–π —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é —Ä–µ–∞–∫—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –æ—Ç –∏–º–µ–Ω–∏ {settings.BOT_NAME}"
        else:
            prompt = f"–¢—ã {settings.BOT_NAME}. –û—Ç—Ä–µ–∞–≥–∏—Ä—É–π –Ω–∞ —Ñ–æ—Ç–æ —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∞ –±—ã {settings.BOT_NAME} –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞. –í—ã—Å–∫–∞–∂–∏ –º–Ω–µ–Ω–∏–µ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ –∏–ª–∏ –¥–∞–π —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –æ—Ç –∏–º–µ–Ω–∏ {settings.BOT_NAME}" # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º

        contents = [prompt, image] # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Image –∏–∑ Pillow

        logger.info(f"Sending image analysis request to Gemini for user {user_id} in chat {chat_id}")
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING)
        await asyncio.sleep(random.uniform(0.5, 1.5))
        response_gemini = await asyncio.to_thread(model.generate_content, contents)

        if hasattr(response_gemini, 'text') and response_gemini.text:
            logger.info(f"Gemini image analysis response: {response_gemini.text}")
            filtered_response = filter_response(response_gemini.text)
            add_to_history(history_key, ASSISTANT_ROLE, filtered_response)
            await update.message.reply_text(filtered_response, parse_mode=None)
            last_bot_message_to_user_in_group[user_id] = filtered_response
        else:
            logger.warning("Gemini image analysis response was empty or lacked text.")
            await update.message.reply_text("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        logger.error(f"Error downloading image: {e}")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        logger.error(f"Error during image analysis: {e}")

def setup_handlers(application):
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("remember", remember_command))
    application.add_handler(CommandHandler("clear_my_history", clear_my_history_command))
    application.add_handler(CommandHandler("setmyname", set_my_name_command))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
    application.add_handler(MessageHandler(filters.VIDEO_NOTE, handle_video_note_message))
    # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_error_handler(error_handler)
    application.add_handler(CallbackQueryHandler(button_callback))

    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("set_group_style", set_group_user_style_command, filters=filters.User(ADMIN_USER_IDS)))
    application.add_handler(CommandHandler("reset_style", reset_style_command, filters=filters.User(ADMIN_USER_IDS)))
    application.add_handler(CommandHandler("clear_history", clear_history_command, filters=filters.User(ADMIN_USER_IDS)))
    application.add_handler(CommandHandler("list_admins", list_admins_command, filters=filters.User(ADMIN_USER_IDS)))
    application.add_handler(CommandHandler("get_log", get_log_command, filters=filters.User(ADMIN_USER_IDS)))
    application.add_handler(CommandHandler("ban", ban_user_command, filters=filters.User(ADMIN_USER_IDS)))
    application.add_handler(CommandHandler("delete", delete_message_command, filters=filters.User(ADMIN_USER_IDS)))
    application.add_handler(CommandHandler("set_default_style", set_default_style_command, filters=filters.User(ADMIN_USER_IDS)))
    application.add_handler(CommandHandler("set_bot_name", set_bot_name_command, filters=filters.User(ADMIN_USER_IDS)))
    application.add_handler(CommandHandler("set_proactive_probability", set_proactive_probability_command, filters=filters.User(ADMIN_USER_IDS)))

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(re.compile(r"(^|\s)(–º–∞—à–∞|–±–æ—Ç)(\s|$).*(–∑–∞–º–æ–ª—á–∏)", re.IGNORECASE)), silence_command))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(re.compile(r"(^|\s)(–º–∞—à–∞|–±–æ—Ç)(\s|$).*(–Ω–∞—á–Ω–∏ –≥–æ–≤–æ—Ä–∏—Ç—å)", re.IGNORECASE)), unmute_command))

def setup_jobs(application):
    application.job_queue.run_repeating(
        callback=cleanup_history,
        interval=300.0,
        first=10.0
    )
    application.job_queue.run_repeating(
        callback=cleanup_audio_files,
        interval=3600.0,  # –ó–∞–ø—É—Å–∫–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–π —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)
        first=60.0  # –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    )

async def reset_correction_flag(chat_id: int, delay: int = 30):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ bot_was_recently_corrected —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
    await asyncio.sleep(delay)
    if chat_id in bot_was_recently_corrected:
        del bot_was_recently_corrected[chat_id]
        logger.info(f"Correction flag reset for chat {chat_id}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    try:
        global learned_responses, user_info_db, group_preferences, chat_history, settings, DEFAULT_STYLE, BOT_NAME, last_bot_message_to_user_in_group, chat_proactive_probabilities, user_muted_in_chat, bot_was_recently_corrected
        load_learned_responses()
        DEFAULT_STYLE = settings.DEFAULT_STYLE
        BOT_NAME = settings.BOT_NAME

        application = ApplicationBuilder().token(TOKEN).build()

        setup_handlers(application)
        setup_jobs(application)

        logger.info("Starting bot...")
        # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        application.run_polling(stop_signals=None)

        logger.info("Bot stopped. Saving learned responses and user info...")
        save_learned_responses(learned_responses, user_info_db, group_preferences, chat_history, last_bot_message_to_user_in_group, chat_proactive_probabilities, user_muted_in_chat, bot_was_recently_corrected) # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    except Exception as e:
        logger.critical(f"Failed to start bot: {e}")
        raise

def load_learned_responses():
    global learned_responses, group_preferences, user_info_db, chat_history, settings, DEFAULT_STYLE, BOT_NAME, last_bot_message_to_user_in_group, chat_proactive_probabilities, user_muted_in_chat, bot_was_recently_corrected
    file_path = os.path.join(".", KNOWLEDGE_FILE)
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)
            learned_responses = data.get("learned_responses", {})
            group_preferences = data.get("group_preferences", {})
            last_bot_message_to_user_in_group = data.get("last_bot_message_to_user_in_group", {})
            chat_proactive_probabilities = data.get("chat_proactive_probabilities", {})
            user_muted_in_chat = data.get("user_muted_in_chat", {})
            bot_was_recently_corrected = data.get("bot_was_recently_corrected", {})
            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
            bot_settings_data = data.get("bot_settings")
            if bot_settings_data:
                settings.MAX_HISTORY = bot_settings_data.get('MAX_HISTORY', settings.MAX_HISTORY)
                settings.DEFAULT_STYLE = bot_settings_data.get('DEFAULT_STYLE', settings.DEFAULT_STYLE)
                settings.BOT_NAME = bot_settings_data.get('BOT_NAME', settings.BOT_NAME)
                settings.HISTORY_TTL = bot_settings_data.get('HISTORY_TTL', settings.HISTORY_TTL)
                settings.GLOBAL_PROACTIVE_PROBABILITY = bot_settings_data.get('GLOBAL_PROACTIVE_PROBABILITY', settings.GLOBAL_PROACTIVE_PROBABILITY)
    except FileNotFoundError:
        learned_responses = {}
        group_preferences = {}
        last_bot_message_to_user_in_group = {}
        chat_proactive_probabilities = {}
        user_muted_in_chat = {}
        bot_was_recently_corrected = {}
    except json.JSONDecodeError as e:
        logger.error(f"Error decoding JSON in {KNOWLEDGE_FILE}: {e}")
        learned_responses = {}
        group_preferences = {}
        last_bot_message_to_user_in_group = {}
        chat_proactive_probabilities = {}
        user_muted_in_chat = {}
        bot_was_recently_corrected = {}

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_info_db –∏ chat_history, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if user_info_db is None:
        user_info_db = {}
    if chat_history is None:
        chat_history = {}

    user_data_dir = os.path.join(".", USER_DATA_DIR)
    os.makedirs(user_data_dir, exist_ok=True)
    for filename in os.listdir(user_data_dir):
        if filename.startswith("user_") and filename.endswith(".json"):
            try:
                user_id = int(filename[len("user_"):-len(".json")])
                user_file_path = os.path.join(user_data_dir, filename)
                with open(user_file_path, "r", encoding="utf-8") as f:
                    user_data = json.load(f)
                    if user_id not in user_info_db:
                        user_info_db[user_id] = {}
                    user_info_db[user_id].update(user_data)
            except ValueError:
                logger.warning(f"Skipping invalid user data filename: {filename}")
            except FileNotFoundError:
                logger.warning(f"User data file not found: {filename}")
            except json.JSONDecodeError as e:
                logger.error(f"Error decoding JSON in user data file {filename}: {e}")

def save_learned_responses(responses, user_info, group_prefs, chat_hist, last_bot_messages, chat_probas, user_mutes, correction_flags):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è
    file_path = os.path.join(".", KNOWLEDGE_FILE)
    data = {
        "learned_responses": responses,
        "group_preferences": group_prefs,
        "bot_settings": {
            "MAX_HISTORY": settings.MAX_HISTORY,
            "DEFAULT_STYLE": settings.DEFAULT_STYLE,
            "BOT_NAME": settings.BOT_NAME,
            "HISTORY_TTL": settings.HISTORY_TTL,
            "GLOBAL_PROACTIVE_PROBABILITY": settings.GLOBAL_PROACTIVE_PROBABILITY,
        },
        "last_bot_message_to_user_in_group": last_bot_messages,
        "chat_proactive_probabilities": chat_probas,
        "user_muted_in_chat": user_mutes,
        "bot_was_recently_corrected": correction_flags,
    }
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    user_data_dir = os.path.join(".", USER_DATA_DIR)
    os.makedirs(user_data_dir, exist_ok=True)
    for user_key, data in user_info.items():
        user_filename = f"user_{user_key}.json"
        user_file_path = os.path.join(user_data_dir, user_filename)
        try:
            with open(user_file_path, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
        except Exception as e:
            logger.error(f"Error saving user data for {user_key} to {user_filename}: {e}")

@admin_only
async def set_default_style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        new_style = " ".join(context.args)
        settings.update_default_style(new_style)
        global DEFAULT_STYLE
        DEFAULT_STYLE = new_style # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        await update.message.reply_text(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:\n{new_style}")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è.")

@admin_only
async def set_bot_name_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        new_name = " ".join(context.args)
        settings.update_bot_name(new_name)
        global BOT_NAME
        BOT_NAME = new_name # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        await update.message.reply_text(f"–ò–º—è –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_name}")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –±–æ—Ç–∞.")

if __name__ == "__main__":
    main()